# syntax=docker/dockerfile:1
# Dockerfile to build the Synapse utility to compress state in a Postgres DB
# and to build the postgres metrics exporter from the Prometheus community
#
# Note that it uses features which are only available in BuildKit - see
# https://docs.docker.com/go/buildkit/ for more information.
#
# To build the image, run `docker build` command from the same folder as
# the dockerfile.
#
#    DOCKER_BUILDKIT=1 docker build -f Dockerfile-deb .
#
#
ARG coturn_git_ref='4.5.2'

###
#     Stage 1: state compressor: Install cargo, a golang compiler
###

FROM docker.io/rust:slim-bullseye as builder-SC

WORKDIR /opt/synapse_tools

RUN \
   --mount=type=cache,target=/var/cache/apt,sharing=locked \
   --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update -qq && apt-get install -yqq \
      git libssl-dev make pkg-config python3 \
    && rm -rf /var/lib/apt/lists/*

RUN git clone --depth 1 https://github.com/matrix-org/rust-synapse-compress-state.git .

RUN \
    --mount=type=cache,target=/usr/local/cargo/registry \
    RUSTFLAGS="-C target-feature=-crt-static" cargo install --path .

WORKDIR /opt/synapse_tools/synapse_auto_compressor

RUN \
    --mount=type=cache,target=/usr/local/cargo/registry \
    RUSTFLAGS="-C target-feature=-crt-static" cargo install --path .

###
#     Stage 2: postgres metrics exporter
###

FROM golang:bullseye AS builder-pgexporter

WORKDIR /opt/pgexporter

RUN git clone --depth=1 https://github.com/prometheus-community/postgres_exporter.git .

RUN make build

###
#     Stage 3: redis metrics exporter
###

# The redis exporter found at https://github.com/oliver006/redis_exporter
#
# Uses an alpine container to build the exporter itself with go.

FROM golang:1.19-alpine as builder-redisexporter

WORKDIR /opt/redis_exporter

RUN apk --no-cache add ca-certificates git && \
    git clone https://github.com/oliver006/redis_exporter.git .

# ADD . /go/src/github.com/oliver006/redis_exporter/

ARG SHA1="[no-sha]"
ARG TAG="[no-tag]"
ARG GOARCH="amd64"

RUN BUILD_DATE=$(date +%F-%T) CGO_ENABLED=0 GOOS=linux GOARCH=$GOARCH go build -o /redis_exporter \
    -ldflags  "-s -w -extldflags \"-static\" -X main.BuildVersion=$TAG -X main.BuildCommitSha=$SHA1 -X main.BuildDate=$BUILD_DATE" . && \
    /redis_exporter -version && \
    ls -la /redis_exporter

###
#     Stage 4: coturn from source
###

# Coturn from source at github
# https://github.com/coturn/coturn
# This part is lifted right from their own dockerfile, with a few edits

FROM debian:bullseye-slim as coturn-dep-build

# Install tools for building.
RUN apt-get update \
 && apt-get install -y --no-install-recommends --no-install-suggests \
            ca-certificates cmake g++ git make \
 && update-ca-certificates

# Install prometheus-client-c build dependencies.
RUN apt-get install -y --no-install-recommends --no-install-suggests \
            libmicrohttpd-dev

# Prepare prometheus-client-c sources for building.
ARG prom_ver=0.1.3
RUN mkdir -p /build/ && cd /build/ \
 && git init \
 && git remote add origin https://github.com/digitalocean/prometheus-client-c \
 && git fetch --depth=1 origin "v${prom_ver}" \
 && git checkout FETCH_HEAD

# Build libprom.so from sources.
RUN mkdir -p /build/prom/build/ && cd /build/prom/build/ \
 && TEST=0 cmake -G "Unix Makefiles" \
                 -DCMAKE_INSTALL_PREFIX=/usr \
                 -DCMAKE_SKIP_BUILD_RPATH=TRUE \
                 -DCMAKE_C_FLAGS="-DPROM_LOG_ENABLE -g -O3" \
                 .. \
 && make

# Build libpromhttp.so from sources.
RUN mkdir -p /build/promhttp/build/ && cd /build/promhttp/build/ \
 # Fix compiler warning: -Werror=incompatible-pointer-types
 && sed -i 's/\&promhttp_handler/(MHD_AccessHandlerCallback)\&promhttp_handler/' \
           /build/promhttp/src/promhttp.c \
 && TEST=0 cmake -G "Unix Makefiles" \
                 -DCMAKE_INSTALL_PREFIX=/usr \
                 -DCMAKE_SKIP_BUILD_RPATH=TRUE \
                 -DCMAKE_C_FLAGS="-g -O3" \
                 .. \
 && make VERBOSE=1

# Install prometheus-client-c.
RUN LIBS_DIR=/out/$(dirname $(find /usr/ -name libc.so)) \
 && mkdir -p $LIBS_DIR/ \
 && cp -rf /build/prom/build/libprom.so \
           /build/promhttp/build/libpromhttp.so \
       $LIBS_DIR/ \
 && mkdir -p /out/usr/include/ \
 && cp -rf /build/prom/include/* \
           /build/promhttp/include/* \
       /out/usr/include/ \
 # Preserve license file.
 && mkdir -p /out/usr/share/licenses/prometheus-client-c/ \
 && cp /build/LICENSE /out/usr/share/licenses/prometheus-client-c/


#
# Stage 'coturn-build' creates Coturn distribution.
#

# https://hub.docker.com/_/debian
FROM debian:bullseye-slim AS coturn-build

RUN mkdir -p /app

# Install tools for building.
RUN apt-get update \
 && apt-get install -y --no-install-recommends --no-install-suggests \
            autoconf ca-certificates coreutils g++ git libtool make pkg-config \
 && update-ca-certificates

# Install Coturn build dependencies.
RUN apt-get install -y --no-install-recommends --no-install-suggests \
            libevent-dev \
            libssl-dev \
            libpq-dev libmariadb-dev libsqlite3-dev \
            libhiredis-dev \
            libmongoc-dev \
            libmicrohttpd-dev

# Install prometheus-client-c distribution.
COPY --from=coturn-dep-build /out/ /

# Use Coturn sources from Git if `coturn_git_ref` is specified.
ARG coturn_git_ref
ARG coturn_github_url=https://github.com
ARG coturn_github_repo=coturn/coturn

RUN git init \
 && git remote add origin ${coturn_github_url}/${coturn_github_repo} \
 && git fetch --depth=1 origin "${coturn_git_ref}" \
 && git checkout FETCH_HEAD

# Build Coturn from sources.
RUN ./configure --prefix=/usr \
                --turndbdir=/var/lib/coturn \
                --disable-rpath \
                --sysconfdir=/etc/coturn \
                # No documentation included to keep image size smaller.
                --mandir=/tmp/coturn/man \
                --docsdir=/tmp/coturn/docs \
                --examplesdir=/tmp/coturn/examples \
 && make

# Install and configure Coturn.
RUN mkdir -p /out/ \
 && DESTDIR=/out make install \
 # Remove redundant files.
 && rm -rf /out/tmp/ \
 # Preserve license file.
 && mkdir -p /out/usr/share/licenses/coturn/ \
 && cp LICENSE /out/usr/share/licenses/coturn/ \
 # Remove default config file.
 && rm -f /out/etc/coturn/turnserver.conf.default

# Re-export prometheus-client-c distribution.
# This preserves all the stuff built, in case we need docs or licenses in the future.
COPY --from=coturn-dep-build /out/ /out/

###
#     Last Stage: Final Image
###

FROM debian:bullseye-slim

COPY --from=builder-SC /opt/synapse_tools/target/release/synapse_auto_compressor /usr/local/bin/synapse_auto_compressor
COPY --from=builder-SC /opt/synapse_tools/target/release/synapse_compress_state /usr/local/bin/synapse_compress_state
COPY --from=builder-pgexporter /opt/pgexporter /usr/local/bin/postgres_exporter
COPY --from=builder-redisexporter /redis_exporter /usr/local/bin/redis_exporter
# COPY --from=coturn-build /out/ /out
COPY --from=coturn-build /out/usr/bin/turnserver /usr/bin/turnserver
COPY --from=coturn-build /out/usr/lib/ /usr/lib/
